import { useRef } from "react";
import { useDoctorAI } from "../context/DoctorAIContext";
import { MessageBubble } from "../components/MessageBubble";

export default function DoctorAIPage() {
  const {
    state,
    setDescription,
    setInput,
    addFiles,
    clearFiles,
    sendMessage,
    clearHistory,
  } = useDoctorAI();
  const fileRef = useRef<HTMLInputElement | null>(null);

  return (
    <div className="container py-4">
      <div className="d-flex align-items-center gap-2 mb-3">
        <button className="btn btn-light" onClick={() => history.back()}>
          Tr·ªü v·ªÅ
        </button>
        <h2 className="m-0">üêæ DoctorAI</h2>
      </div>

      <div className="row g-4" style={{ alignItems: "stretch" }}>
        {/* LEFT: Upload & Description */}
        <div className="col-md-6 col-lg-6 d-flex">
          <div className="card shadow-sm w-100">
            <div className="card-header bg-white">
              <strong>Upload & M√¥ t·∫£ ca b·ªánh</strong>
            </div>
            <div className="card-body">
              <div
                className=" border-2 border-dashed rounded-3 p-4 text-center mb-3"
                style={{ borderStyle: "dashed" }}
              >
                <div className="display-6">‚¨áÔ∏è</div>
                <p className="fw-semibold mb-1">
                  K√©o th·∫£ ·∫£nh v√†o ƒë√¢y ho·∫∑c click ƒë·ªÉ ch·ªçn
                </p>
                <p className="text-muted small">
                  H·ªó tr·ª£: PDF/JPG/PNG/WEBP (‚â§10MB, t·ªëi ƒëa 5 ·∫£nh)
                </p>
                <input
                  ref={fileRef}
                  type="file"
                  className="form-control"
                  multiple
                  accept="image/*,.pdf"
                  onChange={(e) => {
                    addFiles(Array.from(e.target.files || []));
                    if (fileRef.current) fileRef.current.value = "";
                  }}
                />
                {state.files.length > 0 && (
                  <div className="text-end mt-2">
                    <button
                      className="btn btn-sm btn-outline-secondary"
                      onClick={clearFiles}
                    >
                      X√≥a t·∫•t c·∫£
                    </button>
                  </div>
                )}
              </div>

              {state.files.length > 0 && (
                <div className="row g-2 mb-3">
                  {state.files.map((f, i) => (
                    <div key={i} className="col-4">
                      <div className="border rounded-3 p-2 text-center small">
                        {/^image\//.test(f.type) ? (
                          <img
                            src={URL.createObjectURL(f)}
                            onLoad={(e) =>
                              URL.revokeObjectURL(
                                (e.target as HTMLImageElement).src
                              )
                            }
                            className="img-fluid rounded mb-2"
                            style={{
                              height: 96,
                              objectFit: "cover",
                              width: "100%",
                            }}
                          />
                        ) : (
                          <div className="py-4">PDF</div>
                        )}
                        <div className="text-truncate" title={f.name}>
                          {f.name}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}

              <div className="mb-3">
                <label className="form-label">M√¥ t·∫£ t√¨nh tr·∫°ng</label>
                <textarea
                  className="form-control"
                  rows={6}
                  placeholder="Gi·ªëng/tu·ªïi/c√¢n n·∫∑ng, th·ªùi gian, tri·ªáu ch·ª©ng k√®m, th·ª©c ƒÉn/thu·ªëc g·∫ßn ƒë√¢y..."
                  value={state.description}
                  onChange={(e) => setDescription(e.target.value)}
                />
              </div>
              <div className="text-muted small">
                *·∫¢nh ch·ªâ d√πng ƒë·ªÉ AI ph√¢n t√≠ch. B·∫°n c√≥ th·ªÉ x√≥a tr∆∞·ªõc khi g·ª≠i.
              </div>
            </div>
          </div>
        </div>

        {/* RIGHT: Chat */}
        <div className="col-md-6 col-lg-6 d-flex">
          <div
            className="card shadow-sm d-flex flex-column w-100"
            style={{ height: "100%" }}
          >
            <div
              className="card-header bg-white d-flex justify-content-between align-items-center"
              style={{ flexShrink: 0 }}
            >
              <div>
                <strong>AI B√°c sƒ© th√∫ y</strong>
                <div className="small text-muted">
                  T∆∞ v·∫•n d·ª±a tr√™n ·∫£nh & m√¥ t·∫£
                </div>
              </div>
              <div className="d-flex gap-2">
                <button
                  className="btn btn-sm btn-outline-secondary"
                  onClick={clearHistory}
                >
                  X√≥a l·ªãch s·ª≠
                </button>
              </div>
            </div>

            <div
              className="card-body"
              style={{
                flex: "1 1 0",
                overflowY: "auto",
                overflowX: "hidden",
                padding: "12px",
                minHeight: 0,
                maxHeight: "100%",
              }}
            >
              {state.messages.length === 0 ? (
                <div className="text-center text-muted py-5">
                  <div className="display-6">üí¨</div>
                  <p className="mb-0">
                    H√£y t·∫£i ·∫£nh & m√¥ t·∫£ ·ªü khung tr√°i, r·ªìi nh·∫≠p c√¢u h·ªèi b√™n d∆∞·ªõi
                    ƒë·ªÉ b·∫Øt ƒë·∫ßu.
                  </p>
                </div>
              ) : (
                <div
                  className="d-flex flex-column gap-2"
                  style={{ paddingRight: "4px" }}
                >
                  {state.messages.map((m, i) => (
                    <MessageBubble
                      key={i}
                      role={m.role}
                      text={m.text}
                      imageUrls={m.imageUrls}
                    />
                  ))}

                  {/* Loading indicator khi AI ƒëang x·ª≠ l√Ω */}
                  {state.loading && (
                    <div className="d-flex justify-content-start">
                      <div
                        className="me-2 rounded-circle bg-light d-flex align-items-center justify-content-center"
                        style={{ width: 36, height: 36, flexShrink: 0 }}
                      >
                        ü§ñ
                      </div>
                      <div
                        className="p-3 rounded-3 shadow-sm bg-white border"
                        style={{ maxWidth: "80%" }}
                      >
                        <div className="d-flex align-items-center gap-2">
                          <div
                            className="spinner-border spinner-border-sm text-primary"
                            role="status"
                          >
                            <span className="visually-hidden">Loading...</span>
                          </div>
                          <span className="text-muted small">
                            AI ƒëang ph√¢n t√≠ch ·∫£nh v√† m√¥ t·∫£ c·ªßa b·∫°n... Vui l√≤ng
                            ƒë·ª£i...
                          </span>
                        </div>
                        <div
                          className="progress mt-2"
                          style={{ height: "2px" }}
                        >
                          <div
                            className="progress-bar progress-bar-striped progress-bar-animated"
                            role="progressbar"
                            style={{ width: "100%" }}
                          />
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              )}
              {state.error && (
                <div className="alert alert-danger mt-3">
                  <strong>‚ö†Ô∏è L·ªói:</strong> {state.error}
                  <div className="mt-2">
                    <button
                      className="btn btn-sm btn-outline-danger"
                      onClick={() => {
                        // Clear error v√† c√≥ th·ªÉ retry
                        setInput("");
                      }}
                    >
                      Th·ª≠ l·∫°i
                    </button>
                  </div>
                </div>
              )}
            </div>

            <div className="card-footer bg-white" style={{ flexShrink: 0 }}>
              <div className="d-flex gap-2">
                <textarea
                  className="form-control"
                  rows={2}
                  placeholder="H·ªèi t√¥i v·ªÅ ca b·ªánh..."
                  value={state.input}
                  onChange={(e) => setInput(e.target.value)}
                />
                <button
                  className="btn btn-primary position-relative"
                  disabled={state.loading}
                  onClick={sendMessage}
                  style={{ minWidth: "80px" }}
                >
                  {state.loading ? (
                    <>
                      <span
                        className="spinner-border spinner-border-sm me-2"
                        role="status"
                        aria-hidden="true"
                      />
                      ƒêang x·ª≠ l√Ω...
                    </>
                  ) : (
                    "G·ª≠i"
                  )}
                </button>
              </div>
              <div className="small text-muted mt-1">
                *Th√¥ng tin ch·ªâ tham kh·∫£o, kh√¥ng thay th·∫ø kh√°m tr·ª±c ti·∫øp.
                {state.loading && (
                  <div className="mt-1 text-primary">
                    ‚è±Ô∏è AI ƒëang x·ª≠ l√Ω, c√≥ th·ªÉ m·∫•t 30-60 gi√¢y v·ªõi ·∫£nh...
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
