import axiosInstance from '../../../services/axiosInstance';
import { AxiosError } from 'axios';

/** ===== Types ===== */
export interface ChatRequest {
  conversationId?: string | null;
  userText: string;
  imageUrls: string[];
  createIfMissing?: boolean;
}

export interface ChatResponse {
  conversationId: string;
  reply: string;
}

interface ErrorResponse {
  message?: string;
  error?: string;
}

interface AxiosErrorWithResponse extends AxiosError<ErrorResponse> {
  code?: string;
  message: string;
  name: string;
}

/** ===== Endpoints (relative like forumAPI) ===== */
const UPLOAD_URL = '/api/doctor-ai/upload';
const CHAT_URL = '/api/doctor-ai/chat';

// S·ª≠ d·ª•ng instance chung (ƒë√£ c√≥ baseURL + interceptors)
const instance = axiosInstance;

/** Upload nhi·ªÅu ·∫£nh -> tr·∫£ m·∫£ng URL t·ª´ backend */
export async function uploadImages(files: File[]): Promise<string[]> {
  if (!files.length) return [];
  
  const startTime = Date.now();
  
  try {
    console.log('[doctorAIAPI] üì§ Starting image upload...', {
      fileCount: files.length,
      totalSize: files.reduce((sum, f) => sum + f.size, 0),
    });
    
    const fd = new FormData();
    files.forEach((f, index) => {
      fd.append('images', f);
      console.log(`[doctorAIAPI] Added file ${index + 1}:`, {
        name: f.name,
        size: f.size,
        type: f.type,
      });
    });

    const res = await instance.post<{ urls?: string[] }>(UPLOAD_URL, fd, {
      headers: { 'Content-Type': 'multipart/form-data' },
      timeout: 30000, // 30 seconds for upload
      onUploadProgress: (progressEvent) => {
        if (progressEvent.total) {
          const percentCompleted = Math.round(
            (progressEvent.loaded * 100) / progressEvent.total
          );
          console.log('[doctorAIAPI] üì§ Upload progress:', percentCompleted + '%');
        }
      },
    });

    const elapsedTime = Date.now() - startTime;
    const urls = Array.isArray(res.data?.urls) ? res.data.urls : [];
    console.log('[doctorAIAPI] ‚úÖ Upload completed in', elapsedTime, 'ms');
    console.log('[doctorAIAPI] Received URLs:', urls);
    
    return urls;
  } catch (error) {
    const elapsedTime = Date.now() - startTime;
    const axiosError = error as AxiosErrorWithResponse;
    
    console.error('[doctorAIAPI] ‚ùå Upload error after', elapsedTime, 'ms');
    console.error('[doctorAIAPI] Upload error details:', {
      message: axiosError.message,
      code: axiosError.code,
      status: axiosError.response?.status,
      response: axiosError.response?.data,
    });
    
    throw new Error(
      axiosError.response?.data?.message || 
      'Kh√¥ng th·ªÉ t·∫£i ·∫£nh l√™n. Vui l√≤ng th·ª≠ l·∫°i sau.'
    );
  }
}

/** G·ª≠i n·ªôi dung chat + ·∫£nh -> nh·∫≠n reply + conversationId */
export async function chat(body: ChatRequest): Promise<ChatResponse> {
  const startTime = Date.now();
  
  try {
    console.log('[doctorAIAPI] üöÄ Starting chat request...');
    console.log('[doctorAIAPI] Payload:', {
      conversationId: body.conversationId || 'new',
      userTextLength: body.userText?.length || 0,
      imageUrlsCount: body.imageUrls?.length || 0,
      createIfMissing: body.createIfMissing,
    });
    
    const res = await instance.post<ChatResponse>(CHAT_URL, body, {
      headers: { 'Content-Type': 'application/json' },
      timeout: 60000, // 60 seconds timeout (AI c√≥ th·ªÉ m·∫•t th·ªùi gian)
      onUploadProgress: (progressEvent) => {
        if (progressEvent.total) {
          const percentCompleted = Math.round(
            (progressEvent.loaded * 100) / progressEvent.total
          );
          console.log('[doctorAIAPI] üì§ Upload progress:', percentCompleted + '%');
        }
      },
    });
    
    const elapsedTime = Date.now() - startTime;
    console.log('[doctorAIAPI] ‚úÖ Chat response received in', elapsedTime, 'ms');
    console.log('[doctorAIAPI] Response data:', {
      conversationId: res.data.conversationId,
      replyLength: res.data.reply?.length || 0,
    });
    
    return res.data;
  } catch (error) {
    const elapsedTime = Date.now() - startTime;
    const axiosError = error as AxiosErrorWithResponse;
    
    console.error('[doctorAIAPI] ‚ùå Chat error after', elapsedTime, 'ms');
    console.error('[doctorAIAPI] Error details:', {
      message: axiosError.message,
      code: axiosError.code,
      name: axiosError.name,
      response: axiosError.response?.data,
      status: axiosError.response?.status,
      timeout: axiosError.code === 'ECONNABORTED' ? 'Request timeout' : 'N/A',
    });
    
    // Handle timeout specifically
    if (axiosError.code === 'ECONNABORTED' || axiosError.message.includes('timeout')) {
      console.error('[doctorAIAPI] ‚è±Ô∏è Request timed out. AI c√≥ th·ªÉ ƒëang x·ª≠ l√Ω l√¢u h∆°n d·ª± ki·∫øn.');
      throw new Error('AI ƒëang x·ª≠ l√Ω c√¢u h·ªèi, c√≥ th·ªÉ m·∫•t nhi·ªÅu th·ªùi gian. Vui l√≤ng th·ª≠ l·∫°i sau 30 gi√¢y ho·∫∑c gi·∫£m s·ªë l∆∞·ª£ng ·∫£nh.');
    }
    
    // Handle different error types
    if (axiosError.response) {
      const status = axiosError.response.status;
      const message = axiosError.response.data?.message || axiosError.response.data?.error;
      
      if (status === 401) {
        throw new Error('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng DoctorAI');
      } else if (status === 404) {
        throw new Error('D·ªãch v·ª• DoctorAI ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.');
      } else if (status === 429) {
        throw new Error('B·∫°n ƒë√£ g·ª≠i qu√° nhi·ªÅu tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i sau.');
      } else if (status === 500) {
        throw new Error('L·ªói server khi x·ª≠ l√Ω. Vui l√≤ng th·ª≠ l·∫°i sau.');
      } else if (status === 503) {
        throw new Error('D·ªãch v·ª• AI ƒëang b·∫≠n. Vui l√≤ng th·ª≠ l·∫°i sau v√†i ph√∫t.');
      } else if (message) {
        throw new Error(message);
      }
    } else if (axiosError.request) {
      // No response received (network error)
      console.error('[doctorAIAPI] üåê Network error - no response from server');
      throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet.');
    }
    
    throw new Error('C√≥ l·ªói x·∫£y ra khi g·ª≠i tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i.');
  }
}
